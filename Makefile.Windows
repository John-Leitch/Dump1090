#
# GNU Makefile for dump1090 (x86, MSVC or clang-cl).
#
# By G. Vanem <gvanem@yahoo.no> 2021.
#
# Ref: https://github.com/gvanem/Dump1090.git
#
TODAY     = $(shell date +%d-%B-%Y)
THIS_FILE = Makefile.Windows

#
# Choose your weapons:
#
# Use CRT debug-mode.
#
USE_CRT_DEBUG ?= 0

#
# Use a mini version of RTLSDR here?
#
USE_BUNDLED_RTLSDR ?= 1

#
# Enable "Addess Sanitation".
# This needs an up-to-date version of 'cl'.
#
# Does not work with 'USE_CRT_DEBUG = 1' and 'CC = clang-cl'.
# But 'USE_CRT_DEBUG = 1' and 'CC = cl' works.
#
USE_ASAN ?= 0

#
# Options for .c-file preprocessing:
#
USE_ASTYLE       ?= 1
USE_CLANG_FORMAT ?= 0

PYTHON ?= py -3

#
# Change the 'CLANG_ROOT' dir to suite:
# Only important if 'USE_ASAN = 1'.
#
CLANG_ROOT ?= f:/ProgramFiler/LLVM-11-32bit
CLANG_VER  ?= 11.0.0

define Usage

  Usage: "make -f $(THIS_FILE) [CC=cl | clang-cl] [all | clean | vclean | depend]")
  Specify CC=cl       - use MSVC
  Specify CC=clang-cl - use clang-cl
endef

#
# Undefine any '%CL%' env-var
#
export CL=

OBJ_DIR = objects

ifeq ($(CC),cl)
else ifeq ($(CC),clang-cl)
else
  $(error $(Usage))
endif

CFLAGS  = -nologo -Zi -W3 -DUSE_MONGOOSE=1
LDFLAGS = -nologo -map -debug -verbose -incremental:no -nodefaultlib:uuid.lib
RCFLAGS = -nologo

ifeq ($(USE_CRT_DEBUG),1)
  CFLAGS  += -MDd -GS -Oy- -RTCu -RTCs
  RCFLAGS += -D_DEBUG
else
  CFLAGS += -MD -GS- -Zo -Oy- -Ox -Gs0
endif

ifeq ($(CC),clang-cl)
  CFLAGS  += -fms-compatibility -ferror-limit=5
  RCFLAGS += -D__clang__
else
  RCFLAGS += -D_MSC_VER
endif

CFLAGS += -FI./dump1090_config.h -I. -I./externals -I./externals/rtl-sdr

#
# Since 'rtlsdr' is used as a static library.
#
CFLAGS += -Drtlsdr_STATIC

ifeq ($(USE_ASAN),1)
  CFLAGS += -fsanitize=address

  ifeq ($(CC),clang-cl)
    LDFLAGS += -inferasanlibs:no \
               -libpath:$(CLANG_ROOT)/lib/clang/$(CLANG_VER)/lib/windows

    EX_LIBS += clang_rt.asan_dynamic-i386.lib \
               clang_rt.asan_dynamic_runtime_thunk-i386.lib
  endif
endif

EX_LIBS += externals/libusb-1.0.lib ws2_32.lib

#
# What to build:
#
TARGETS = dump1090.exe

VPATH  += externals
SOURCES = externals/mongoose.c \
          csv.c                \
          dump1090.c

ifeq ($(USE_BUNDLED_RTLSDR),1)
  VPATH  += externals/rtl-sdr
  CFLAGS += -DUSE_BUNDLED_RTLSDR=1 \
            -DHAVE_rtlsdr_cal_imr  \
            -DLIBUSB_CALL=__stdcall

  SOURCES += $(addprefix externals/rtl-sdr/, \
               librtlsdr.c                   \
               trace.c                       \
               tuner_e4k.c                   \
               tuner_fc001x.c                \
               tuner_fc2580.c                \
               tuner_r82xx.c)
else
  #
  # External static libraries needed:
  #
  EX_LIBS = externals/rtl-sdr/rtlsdr.lib

  #
  # The flags are for Pthreads-W32:
  #
  CFLAGS += -I./externals/pthreads \
            -D__PTW32_STATIC_LIB   \
            -DHAVE_CONFIG_H

  #
  # Use the amalgamated version of Pthreads-W32:
  #
  VPATH   += externals/pthreads
  SOURCES += externals/pthreads/pthread.c
endif

OBJECTS = $(addprefix $(OBJ_DIR)/, $(notdir $(SOURCES:.c=.obj)))

#
# This assumes you have an MSys/Cygwin 'echo.exe' with colour support.
#
BRIGHT_GREEN = \e[1;32m
green_msg = @echo -e "$(BRIGHT_GREEN)$(strip $(1))\e[0m"

all: $(OBJ_DIR) $(TARGETS)
	$(call green_msg, Welcome to Dump1090.)

$(OBJ_DIR) doxy-docs:
	- mkdir $@

dump1090.exe: $(OBJECTS) $(OBJ_DIR)/dump1090.res
	$(call link_EXE, $@, $^ $(EX_LIBS))

$(OBJ_DIR)/%.obj: %.c
	$(CC) -c $(CFLAGS) -Fo$@ $<
	@echo

$(OBJ_DIR)/dump1090.res: dump1090.rc
	rc $(RCFLAGS) -fo $@ $<
	@echo

docs: doxy-docs doxy-docs/Doxyfile
	cd $< ; doxygen Doxyfile 2> doxygen.log
	$(call green_msg, Doxygen generated docs done. Look in 'doxy-docs/doxygen.log' for details.\n)
	- (cd $< ; hhc index.hhp)
	$(call green_msg, dump1090.chm generation done.)
	cp --update doxy-docs/dump1090.chm .

docs_clean:
	rm -fR doxy-docs/*
	rm -f dump1090.chw
	- rmdir doxy-docs

doxy-docs/Doxyfile: doxy-docs $(THIS_FILE)
	$(call Generate, $@, #)
	$(file >> $@,$(dump1090_Doxyfile))

%.i: %.c cpp_filter.py FORCE
	$(call C_preprocess, $@, $<)

FORCE:

cpp_filter.py: $(THIS_FILE)
	$(call green_msg, Generating $@)
	$(file >  $@,#!/usr/bin/env python)
	$(file >> $@,#)
	$(file >> $@,# DO NOT EDIT! This file was generated automatically)
	$(file >> $@,# from $(realpath $<). Edit that file instead.)
	$(file >> $@,#)
	$(file >> $@,from __future__ import print_function)
	$(file >> $@,if 1:)
	$(file >> $@,$(cpp_filter_py))

#
# '$(sort ..)' will create a unique list.
#
TARGETS_JUNK = $(sort $(TARGETS:.exe=.map) \
                      $(TARGETS:.exe=.pdb) \
                      $(TARGETS:.exe=.exp) \
                      $(TARGETS:.exe=.lib))

OTHER_JUNK = link.tmp link.args vc1*.pdb cpp_filter.py

clean: docs_clean
	rm -f $(TARGETS_JUNK) $(OTHER_JUNK) $(OBJ_DIR)/*
	- rmdir $(OBJ_DIR)

vclean realclean: clean
	rm -f $(TARGETS) dump1090.chm .depend.Windows

#
# .obj -> .exe macro
# arg1, $(1): The .exe file.
# arg2, $(2): The .obj file(s), extras and libs.
#
define link_EXE
  $(call green_msg, Linking $(1))
  $(call make_resp_file, link.args, $(LDFLAGS) $(2))
  link -out:$(strip $(1)) @link.args > link.tmp
  @cat link.tmp >> $(1:.exe=.map)
  @rm -f $(1:.exe=.exp)
  @echo
endef

define Warning
  $(1)
  $(1) DO NOT EDIT! This file was automatically generated
  $(1) from $(realpath $(THIS_FILE)) at $(TODAY).
  $(1) Edit that file instead.
  $(1)
endef

define Generate
  $(call green_msg, Generating $(1))
  $(file > $(1),$(call Warning,$(strip $(2))))
endef

#
# Response file macro:
#   arg1, $(1): The name of the response file
#   arg2, $(2): it's contents (one word per line)
#
define make_resp_file
  $(file > $(1))
  $(foreach f, $(2), $(file >> $(1),$(strip $(f))) )
endef

define dump1090_Doxyfile
  PROJECT_NAME          = "Dump1090"
  PROJECT_LOGO          = # to-do
  STRIP_FROM_PATH       = $(realpath .)/
  OPTIMIZE_OUTPUT_FOR_C = yes
  FORCE_LOCAL_INCLUDES  = yes
  QUIET                 = yes
  PREDEFINED            = __DOXYGEN__:=1 _WIN32:=1 USE_MONGOOSE:=1
  INPUT                 = ../dump1090.c           \
                          ../csv.c                \
                          ../csv.h                \
                          ../externals/mongoose.c \
                          ../externals/mongoose.h \
                          ../externals/rtl-sdr.h  \
                          ../externals/pthreads/pthread.c
  EXAMPLE_PATH          = ..
  IMAGE_PATH            = ..
  INLINE_SIMPLE_STRUCTS = yes
  SOURCE_BROWSER        = yes
  CALL_GRAPH            = yes
  CALLER_GRAPH          = yes
  HAVE_DOT              = yes
  OUTPUT_DIRECTORY      = $(realpath .)/doxy-docs
  HTML_OUTPUT           = .
  GENERATE_HTMLHELP     = yes
  GENERATE_LATEX        = no
  SEARCHENGINE          = no
  CHM_FILE              = dump1090.chm
endef

ifeq ($(USE_ASTYLE),1)
  C_FORMATER = | astyle

else ifeq ($(USE_CLANG_FORMAT),1)
  C_FORMATER = | clang-format -style=Mozilla -assume-filename=c
endif

define C_preprocess
  $(call green_msg, Preprocessing $(2))
  $(file  > $(1),/* The result of preprocessing '$(strip $(2))':)
  $(file >> $(1),   $(CC))
  $(foreach f, -E $(CFLAGS), $(file >> $(1),    $(f)))
  $(file >> $(1), ---------------------------------------------------------)
  $(file >> $(1), Try compile this output.)
  $(file >> $(1),*/)
  $(CC) -E $(CFLAGS) $(2) | $(PYTHON) cpp_filter.py $(C_FORMATER) >> $(1)
endef

define cpp_filter_py
  import sys, os

  try:
    import ntpath
  except ImportError as e:
    print ("Failed to import ntpath: %s" % e)
    sys.exit(1)

  def _win32_abspath (path):
    path = ntpath.abspath (path)
    return path.replace ('\\', '/')

  def skip_cwd (s1, s2):
    ''' Skip the leading part that is in common with s1 and s2
    '''
    i = 0
    while i < len(s1) and s1[i] == s2[i]:
       i += 1
    return s2[i:]

  cwd = _win32_abspath (os.getcwd()) + '/'

  last_line  = '??'
  last_fname = '??'
  empty_lines = 0

  while True:
    line = sys.stdin.readline()
    if not line:
      break
    if line.startswith('\n') or line.startswith('\r'):
      empty_lines += 1
      continue

    if line.lstrip().startswith("#line"):
      line = line.replace ("\\\\", "/")
    fname = None
    quote = line.find ('\"')

    if line.startswith ("#line ") and quote > 0:
      fname = _win32_abspath (line[quote:])
      last_fname = fname

    if line.strip() != '' and last_line != '':
      if fname is None or fname != last_fname:
        print (line, end="")

      l2 = line.strip()
      if l2 == '}' or l2 == '};':  # Print a newline after a functions or structs
        print ("")

    last_line = line

  if empty_lines > 0:
    sys.stderr.write ("Removed %d empty lines.\n" % empty_lines)

endef

DEP_CFLAGS  = -MM $(filter -D% -I%, $(CFLAGS))
DEP_REPLACE = -e 's@\(.*\)\.o: @\n$$(OBJ_DIR)\/\1.$.obj: @'

depend:
	$(call Generate, .depend.Windows, #)
	gcc $(DEP_CFLAGS) $(SOURCES) | sed $(DEP_REPLACE) >> .depend.Windows

-include .depend.Windows

