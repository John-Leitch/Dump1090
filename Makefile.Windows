#
# GNU Makefile for dump1090 (x86/x64, MSVC or clang-cl).
#
# By G. Vanem <gvanem@yahoo.no> 2021.
#
# Ref: https://github.com/gvanem/Dump1090.git
#
TODAY     = $(shell date +%d-%B-%Y)
THIS_FILE = Makefile.Windows

#
# Choose your weapons:
#
# Use CRT debug-mode.
#
USE_CRT_DEBUG ?= 0

#
# For SDRPlay support, load the "RTLSDR-Emul.DLL" at runtime instead.
# Ref. https://github.com/JvanKatwijk/rtlsdr-emulator-sdrplay.git
#
USE_RTLSDR_EMUL ?= 0

#
# Enable "Address Sanitation".
# This needs an up-to-date version of 'cl'.
#
# Does not work with 'USE_CRT_DEBUG = 1' and 'CC = clang-cl'.
# But 'USE_CRT_DEBUG = 1' and 'CC = cl' works.
#
USE_ASAN ?= 0

#
# For my private build; use the tracing Winsock library?
#
USE_WSOCK_TRACE ?= 0

#
# For .c-file preprocessing:
#
USE_ASTYLE ?= 1
PYTHON     ?= py -3

#
# Change the 'CLANG_[32|64]' directory to suite:
# Only important if 'USE_ASAN = 1'.
#
CLANG_32  ?= f:/ProgramFiler/LLVM-11-32bit
CLANG_64  ?= f:/ProgramFiler/LLVM-11-64bit
CLANG_VER ?= 11.0.0

define Usage

  Usage: "make -f $(THIS_FILE) [CC=cl | clang-cl] [CPU=x86 | x64] [all | clean | vclean | depend]")
  Specify CC=cl       - build with MSVC
  Specify CC=clang-cl - build with clang-cl
  Specify CPU=x86     - build for 32-bit
  Specify CPU=x64     - build for 64-bit
endef

#
# Undefine any '%CL%' env-var
#
export CL=

#
# Undefine any gcc include-path env-vars since
# it could confuse clang-cl.
#
export C_INCLUDE_PATH=
export CPLUS_INCLUDE_PATH=

OBJ_DIR = objects

ifneq ($(CC),cl)
  ifneq ($(CC),clang-cl)
    $(error $(Usage))
  endif
endif

VPATH = externals \
        externals/rtl-sdr

CFLAGS = -nologo -Zi -W3        \
         -FI./dump1090_config.h \
         -I.                    \
         -I./externals          \
         -I./externals/rtl-sdr  \
         -I./externals/SDRplay-API

LDFLAGS = -nologo -map -debug -verbose -incremental:no -nodefaultlib:uuid.lib -machine:$(CPU)
RCFLAGS = -nologo

ifeq ($(USE_CRT_DEBUG),1)
  CFLAGS  += -MDd -GS -Oy- -RTCu -RTCs
  RCFLAGS += -D_DEBUG
else
  CFLAGS += -MD -GS- -Zo -Oy- -Ox -Gs0
endif

ifeq ($(CC),clang-cl)
  CFLAGS  += -fms-compatibility -ferror-limit=5
  RCFLAGS += -D__clang__
else
  RCFLAGS += -D_MSC_VER
endif

#
# If '$(CPU)=x64', build 64-bit targets. Otherwise 32-bit targets.
#
ifeq ($(CPU),)
  CPU = x86
endif

#
# GNU Make handles environment variables in a case-sensitive manner.
#
ifeq ($(CPU),X64)
  BITS = 64
else ifeq ($(CPU),x64)
  BITS = 64
else ifeq ($(CPU),x86)
  BITS = 32
else ifeq ($(CPU),X86)
  BITS = 32
else
  $(error Unsupported $$(CPU)=$(CPU))
endif

ifeq ($(USE_ASAN),1)
  CFLAGS += -fsanitize=address

  ifeq ($(CC),clang-cl)
    LDFLAGS += -inferasanlibs:no \
               -libpath:$(CLANG_$(BITS))/lib/clang/$(CLANG_VER)/lib/windows

    ifeq ($(CPU),x86)
      EX_LIBS += clang_rt.asan_dynamic-i386.lib \
                 clang_rt.asan_dynamic_runtime_thunk-i386.lib
    else
      EX_LIBS += clang_rt.asan_dynamic-x86_64.lib \
                 clang_rt.asan_dynamic_runtime_thunk-x86_64.lib
    endif
  endif
endif

RCFLAGS += -DRC_BITS=$(BITS)

EX_LIBS += advapi32.lib setupapi.lib winusb.lib

ifeq ($(USE_WSOCK_TRACE),1)
  EX_LIBS += wsock_trace.lib
else
  EX_LIBS += ws2_32.lib
endif

#
# What to build:
#
TARGETS = dump1090.exe

SOURCES = externals/mongoose.c    \
          externals/rtlsdr-emul.c \
          csv.c                   \
          dump1090.c              \
          misc.c

ifeq ($(USE_RTLSDR_EMUL),1)
  CFLAGS += -DUSE_RTLSDR_EMUL
else
  SOURCES += sdrplay.c
endif

SOURCES += $(addprefix externals/rtl-sdr/, \
             librtlsdr.c                   \
             trace.c                       \
             tuner_e4k.c                   \
             tuner_fc001x.c                \
             tuner_fc2580.c                \
             tuner_r82xx.c)

OBJECTS = $(addprefix $(OBJ_DIR)/, $(notdir $(SOURCES:.c=.obj)))

#
# This assumes you have an MSys/Cygwin 'echo.exe' with colour support.
#
BRIGHT_GREEN = \e[1;32m
green_msg = @echo -e "$(BRIGHT_GREEN)$(strip $(1))\e[0m"

#
# Select currect MSVC / clang-cl compiler w/o the 'vcvarsall.bat' non-sense.
#
# E.g.:
#  'VCToolkitInstallDir=c:\dev\VC_2019\VC\Tools\MSVC\%VC_VER%' is the root of the MSVC tools.
#  'WK_ROOT=c:\ProgramFiles-x86\Windows-Kits' -- the root of the 'WindowsKits' API.
#  'WK_VER=10.0.19041.0'                      -- the 'WindowsKits' version.
#
TOOLS_ROOT = $(realpath $(VCToolkitInstallDir))

ifeq ($(CC),clang-cl)
  _CC = $(realpath $(CLANG_$(BITS)))/bin/clang-cl.exe
else
  _CC = $(TOOLS_ROOT)/bin/HostX86/$(CPU)/cl.exe
endif

#
# The path for the CRT libraries.
#
LDFLAGS += -libpath:$(TOOLS_ROOT)/lib/$(CPU)

#
# E.g. the User-Mode libraries for 'x86' are in:
#   $(WK_ROOT)/Lib/$(WK_VER)/um/x86/
#
LDFLAGS += -libpath:$(realpath $(WK_ROOT))/Lib/$(WK_VER)/um/$(CPU)

#
# Ditto mess for the Universal CRT libraries: for 'x86' the UCRT libs are in:
#   $(WK_ROOT)/Lib/$(WK_VER)/ucrt/x86/
#
LDFLAGS += -libpath:$(realpath $(WK_ROOT))/Lib/$(WK_VER)/ucrt/$(CPU)


all: $(OBJ_DIR) $(TARGETS)
	$(call green_msg, Welcome to Dump1090.)

$(OBJ_DIR) doxy-docs:
	- mkdir $@

dump1090.exe: $(OBJECTS) $(OBJ_DIR)/dump1090.res
	$(call link_EXE, $@, $^ $(EX_LIBS))

$(OBJ_DIR)/%.obj: %.c
	$(_CC) -c $(CFLAGS) -Fo$@ $<
	@echo

$(OBJ_DIR)/dump1090.res: dump1090.rc
	rc $(RCFLAGS) -fo $@ $<
	@echo

docs: doxy-docs doxy-docs/Doxyfile
	cd $< ; doxygen Doxyfile 2> doxygen.log
	$(call green_msg, Doxygen generated docs done. Look in 'doxy-docs/doxygen.log' for details.\n)
	- (cd $< ; hhc index.hhp)
	$(call green_msg, dump1090.chm generation done.)
	cp --update doxy-docs/dump1090.chm .

docs_clean:
	rm -fR doxy-docs/*
	rm -f dump1090.chw
	- rmdir doxy-docs

doxy-docs/Doxyfile: doxy-docs $(THIS_FILE)
	$(call Generate, $@, #)
	$(file >> $@,$(dump1090_Doxyfile))

%.i: %.c cpp_filter.py FORCE
	$(call C_preprocess, $@, $<)

FORCE:

cpp_filter.py: $(THIS_FILE)
	$(call green_msg, Generating $@)
	$(file >  $@,#!/usr/bin/env python)
	$(file >> $@,#)
	$(file >> $@,# DO NOT EDIT! This file was generated automatically)
	$(file >> $@,# from $(realpath $<). Edit that file instead.)
	$(file >> $@,#)
	$(file >> $@,from __future__ import print_function)
	$(file >> $@,if 1:)
	$(file >> $@,$(cpp_filter_py))

#
# '$(sort ..)' will create a unique list.
#
TARGETS_JUNK = $(sort $(TARGETS:.exe=.map) \
                      $(TARGETS:.exe=.pdb) \
                      $(TARGETS:.exe=.exp) \
                      $(TARGETS:.exe=.lib))

OTHER_JUNK = link.tmp link.args vc1*.pdb cpp_filter.py

clean: docs_clean
	rm -f $(TARGETS_JUNK) $(OTHER_JUNK)
	rm -fr $(OBJ_DIR)

vclean realclean: clean
	rm -f $(TARGETS) dump1090.chm .depend.Windows

#
# .obj -> .exe macro
# arg1, $(1): The .exe file.
# arg2, $(2): The .obj file(s), extras and libs.
#
define link_EXE
  $(call green_msg, Linking $(1))
  $(call make_resp_file, link.args, $(LDFLAGS) $(2))
  link -out:$(strip $(1)) @link.args > link.tmp
  @cat link.tmp >> $(1:.exe=.map)
  @rm -f $(1:.exe=.exp)
  @echo
endef

define Warning
  $(1)
  $(1) DO NOT EDIT! This file was automatically generated
  $(1) from $(realpath $(THIS_FILE)) at $(TODAY).
  $(1) Edit that file instead.
  $(1)
endef

define Generate
  $(call green_msg, Generating $(1))
  $(file > $(1),$(call Warning,$(strip $(2))))
endef

#
# Response file macro:
#   arg1, $(1): The name of the response file
#   arg2, $(2): it's contents (one word per line)
#
define make_resp_file
  $(file > $(1))
  $(foreach f, $(2), $(file >> $(1),$(strip $(f))) )
endef

define dump1090_Doxyfile
  PROJECT_NAME          = "Dump1090"
  PROJECT_LOGO          = # to-do
  STRIP_FROM_PATH       = $(realpath .)/
  OPTIMIZE_OUTPUT_FOR_C = yes
  FORCE_LOCAL_INCLUDES  = yes
  QUIET                 = yes
  PREDEFINED            = __DOXYGEN__:=1 _WIN32:=1
  INPUT                 = ../dump1090.c              \
                          ../csv.c                   \
                          ../csv.h                   \
                          ../misc.h                  \
                          ../sdrplay.c               \
                          ../sdrplay.h               \
                          ../externals/mongoose.c    \
                          ../externals/mongoose.h    \
                          ../externals/rtlsdr-emul.c \
                          ../externals/rtlsdr-emul.h
  EXAMPLE_PATH          = ..
  IMAGE_PATH            = ..
  INLINE_SIMPLE_STRUCTS = yes
  SOURCE_BROWSER        = yes
  CALL_GRAPH            = yes
  CALLER_GRAPH          = yes
  HAVE_DOT              = yes
  OUTPUT_DIRECTORY      = $(realpath .)/doxy-docs
  HTML_OUTPUT           = .
  GENERATE_HTMLHELP     = yes
  GENERATE_LATEX        = no
  SEARCHENGINE          = no
  CHM_FILE              = dump1090.chm
endef

ifeq ($(USE_ASTYLE),1)
  C_FORMATER = | astyle
endif

define C_preprocess
  $(call green_msg, Preprocessing $(2))
  $(file  > $(1),/* The result of preprocessing '$(strip $(2))':)
  $(file >> $(1),   $(CC))
  $(foreach f, -E $(CFLAGS), $(file >> $(1),    $(f)))
  $(file >> $(1), ---------------------------------------------------------)
  $(file >> $(1), Try to compile this output.)
  $(file >> $(1),*/)
  $(_CC) -E $(CFLAGS) $(2) | $(PYTHON) cpp_filter.py $(C_FORMATER) >> $(1)
endef

define cpp_filter_py
  import sys, os

  try:
    import ntpath
  except ImportError as e:
    print ("Failed to import ntpath: %s" % e)
    sys.exit(1)

  def _win32_abspath (path):
    path = ntpath.abspath (path)
    return path.replace ('\\', '/')

  def skip_cwd (s1, s2):
    ''' Skip the leading part that is in common with s1 and s2
    '''
    i = 0
    while i < len(s1) and s1[i] == s2[i]:
       i += 1
    return s2[i:]

  cwd = _win32_abspath (os.getcwd()) + '/'

  last_line  = '??'
  last_fname = '??'
  empty_lines = 0

  while True:
    line = sys.stdin.readline()
    if not line:
      break
    if line.startswith('\n') or line.startswith('\r'):
      empty_lines += 1
      continue

    if line.lstrip().startswith("#line"):
      line = line.replace ("\\\\", "/")
    fname = None
    quote = line.find ('\"')

    if line.startswith ("#line ") and quote > 0:
      fname = _win32_abspath (line[quote:])
      last_fname = fname

    if line.strip() != '' and last_line != '':
      if fname is None or fname != last_fname:
        print (line, end="")

      l2 = line.strip()
      if l2 == '}' or l2 == '};':  # Print a newline after a functions or structs
        print ("")

    last_line = line

  if empty_lines > 0:
    sys.stderr.write ("Removed %d empty lines.\n" % empty_lines)

endef

DEP_CFLAGS  = -MM $(filter -D% -I%, $(CFLAGS))
DEP_REPLACE = -e 's@\(.*\)\.o: @\n$$(OBJ_DIR)\/\1.$.obj: @'

depend:
	$(call Generate, .depend.Windows, #)
	gcc $(DEP_CFLAGS) $(SOURCES) | sed $(DEP_REPLACE) >> .depend.Windows

-include .depend.Windows

